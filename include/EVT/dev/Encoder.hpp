#ifndef _EVT_ENCODER_
#define _EVT_ENCODER_

#include <EVT/io/GPIO.hpp>
#include <EVT/utils/log.hpp>
#include <EVT/utils/time.hpp>

namespace time = EVT::core::time;

namespace EVT::core::DEV {

/**
 * This class represents a CTS Series 288 Rotary encoder with a 2-bit Binary resolution.
 * The static wrappers for the interrupt handles must be created in the main method
 * see samples/encoder/main.cpp for example implementation.
 * update() must be called within the main loop to update encoder position.
 */
class Encoder {
public:
    /**
     * Constructs an Encoder instance.
     *
     * @param[in] a a pin of the encoder
     * @param[in] b b pin of the encoder
     * @param[in] range range of the encoder positions
     * @param[in] initialPosition initial position the encoder is in
     */
    Encoder(IO::GPIO& a, IO::GPIO& b, uint32_t range, uint32_t initialPosition, bool rollOver);

    /**
     * Reads and updates the encoder position.
     */
    void update();

    /**
     * Returns the current absolute position
     *
     * @return the current position of the encoder, between 0 and range, inclusive
     */
    uint64_t getPosition();

    /**
     * Handles the interrupt generated by pin a. If two interrupts occur too soon after one another the second is ignored.
     *
     * @param[in] pin pin that cause the interrupt
     */
    void aInterruptHandler(IO::GPIO* pin);

    /**
     * Handles the interrupt generated by pin b. If two interrupts occur too soon after one another the second is ignored.
     *
     * @param[in] pin pin that cause the interrupt
     */
    void bInterruptHandler(IO::GPIO* pin);

private:
    /** GPIO pin a */
    IO::GPIO& a;
    /** GPIO pin b */
    IO::GPIO& b;

    /** position can be in [0, range] */
    uint32_t range;
    /** the current absolute position of the encoder */
    uint32_t position;
    /** if the position rolls over when it reaches range or 0 */
    bool rollOver;
    /** counter for how many updates have occurred since the encoder was moved */
    int8_t currentRelPos;

    //INTERRUPT RELATED VARIABLES
    /** the change since the last update was called, updated in the interrupt handler */
    int64_t interruptChange = 0;
    /** the most recent time in milliseconds since the last interrupt on pin A */
    uint32_t lastAInterruptTime = 0;
    /** the most recent time in milliseconds since the last interrupt on pin B*/
    uint32_t lastBInterruptTime = 0;
    /** how soon after an interrupt another can happen, in milliseconds */
    const static uint32_t INTERRUPTCOOLDOWN = 100;

    /**
     * reads pin values and converts them to the relative position
     *
     * @return relative position of the encoder
     */
    int8_t readPinValues();

    /**
     * changes position by change, capping or rolling over depending on rollOver
     *
     * @param[in] change the the position should be changed by
     * @return if position tried to go outside the range
     */
    bool changePosition(int64_t change);

};// namespace EVT::core::DEV
}// namespace EVT::core::DEV

#endif
